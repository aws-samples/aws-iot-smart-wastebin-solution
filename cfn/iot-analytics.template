AWSTemplateFormatVersion: "2010-09-09"

Description: Creates AWS IoT analytics. #TODO: update description

Parameters:
  ResourcePrefix:
    Type: String

  ProjectName:
    Type: String

Resources:
  IdentifyWasteTypeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-IdentifyWasteTypeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: Execution role for the RoleAlias custom resource Lambda
      Policies:
        - PolicyName: !Sub ${ResourcePrefix}-IdentifyWasteTypePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - rekognition:DetectLabels
                  - rekognition:GetTextDetection
                  - rekognition:DetectText
              - Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${TrashBinS3Bucket}
                  - !Sub arn:${AWS::Partition}:s3:::${TrashBinS3Bucket}/*
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
              - Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
              - Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
                Action:
                  - logs:PutLogEvents

  IoTAnalyticsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IdentifyWasteType.Arn
      Action: lambda:InvokeFunction
      Principal: iotanalytics.amazonaws.com

  IdentifyWasteType:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-IdentifyWasteType
      Architectures: [arm64]
      Runtime: python3.9
      Description: Custom resource handler to provision a IoT role alias from CloudFormation
      Role: !GetAtt IdentifyWasteTypeRole.Arn
      Handler: index.lambda_handler
      Timeout: 20
      MemorySize: 128
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          import datetime
          def get_event_date(event):
            if "timestamp" in event[0]:
              mytimestamp = datetime.datetime.fromtimestamp( event[0]["timestamp"] )
            else:
              mytimestamp = datetime.datetime.fromtimestamp( time.time() )
            return mytimestamp.strftime( "%Y%m%d")
          def lambda_handler(event, context):
              if len(event) > 0 and "s3_image_uri" in event[0]:
                  print(event)
                  bucket_url=event[0]["s3_image_uri"]
                  output=bucket_url.split("/",3)
                  bucket=output[2]
                  photo=output[3]
                  client=boto3.client('rekognition')
                  #process using S3 object
                  try:
                      time.sleep(5)
                      # If using custom models, then please use below syntax
                      #response = client.detect_custom_labels(Image={'S3Object': {'Bucket': bucket, 'Name': photo}},
                      #MinConfidence=30,ProjectVersionArn=model_arn)
                      response = client.detect_labels(Image={'S3Object':{'Bucket':bucket,'Name':photo}},MaxLabels=10)
                  except Exception as ex:
                      print(ex)
                      event[0]["sorted_waste"] = []
                      event[0]["organic_waste"] = 0
                      event[0]["solid_waste"] = 0
                      event[0]["hazardous_waste"] = 0
                      event[0]["other_waste"] = 0
                      return event
                  #Get the custom labels
                  #labels=response['CustomLabels']
                  labels=response['Labels']
                  solid_waste=0
                  organic_waste=0
                  hazardous_waste=0
                  other_waste=0
                  sorted_waste_items=[]
                  organic_waste_dict=["orange","bread","banana","orange peel","apple","onion","vegatable","potato"]
                  solid_waste_dict=["cardboard","plastic","paper","bottle","polethene","paper ball"]
                  hazardous_waste_dict=["batteries"]
                  for label in labels:
                      if label["Name"] in organic_waste_dict:
                          organic_waste+=1
                      elif label["Name"] in solid_waste_dict:
                          solid_waste+=1
                      elif label["Name"] in hazardous_waste_dict:
                          hazardous_waste+=1
                      else:
                          other_waste+=1
                      if label["Name"] not in sorted_waste_items:
                          sorted_waste_items.append(label["Name"])
                  event[0]["sorted_waste"] = sorted_waste_items
                  event[0]["organic_waste"] = organic_waste
                  event[0]["solid_waste"] = solid_waste
                  event[0]["hazardous_waste"] = hazardous_waste
                  event[0]["other_waste"] = other_waste
                  event[0]["event_date"] = get_event_date(event)
                  print(event)
              else:
                  sorted_waste_items=[]
                  event[0]["sorted_waste"] = sorted_waste_items
                  event[0]["organic_waste"] = 0
                  event[0]["solid_waste"] = 0
                  event[0]["hazardous_waste"] = 0
                  event[0]["other_waste"] = 0
                  event[0]["event_date"] = get_event_date(event)
              return event

  TrashBinS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  TrashBinS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TrashBinS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${TrashBinS3Bucket}
              - !Sub arn:aws:s3:::${TrashBinS3Bucket}/*
            Principal:
              Service: iotanalytics.amazonaws.com
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - s3:PutObject
              - s3:DeleteObject

  IoTAnalyticsS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-IoTAnalyticsS3Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iotanalytics.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ResourcePrefix}-iot-analytics-role-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload"
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !GetAtt TrashBinS3Bucket.Arn
                  - !Sub ${TrashBinS3Bucket.Arn}/*

  IoTAnalyticsChannel:
    Type: AWS::IoTAnalytics::Channel
    Properties:
      ChannelName: !Sub ${ResourcePrefix}_trash_channel
      ChannelStorage:
        CustomerManagedS3:
          Bucket: !Sub ${TrashBinS3Bucket}
          RoleArn: !GetAtt IoTAnalyticsS3Role.Arn
      Tags:
        - Key: name
          Value: smart-bin-demo

  Datastore:
    Type: AWS::IoTAnalytics::Datastore
    Properties:
      DatastoreName: !Sub ${ResourcePrefix}_trash_datastore
      DatastoreStorage:
        CustomerManagedS3:
          Bucket: !Sub ${TrashBinS3Bucket}
          RoleArn: !GetAtt IoTAnalyticsS3Role.Arn
      Tags:
        - Key: name
          Value: smart-bin-demo

  Pipeline:
    Type: AWS::IoTAnalytics::Pipeline
    Properties:
      PipelineName: trash_pipeline
      PipelineActivities:
        - Channel:
            Name: trash_channel_activity
            ChannelName: !Sub ${IoTAnalyticsChannel}
            Next: IdentifyWasteType
          Lambda:
            Name: IdentifyWasteType
            LambdaName: !Sub ${IdentifyWasteType}
            BatchSize: 1
            Next: trash_datastore_activity
          Datastore:
            DatastoreName: !Sub ${Datastore}
            Name: trash_datastore_activity
      Tags:
        - Key: name
          Value: smart-bin-demo

  Dataset:
    Type: AWS::IoTAnalytics::Dataset
    Properties:
      DatasetName: !Sub ${ResourcePrefix}_trash_dataset
      Actions:
        - ActionName: SqlAction
          QueryAction:
            SqlQuery: !Sub select * from ${Datastore}
      Triggers:
        - Schedule:
            ScheduleExpression: cron(0/15 * * * ? *)
      RetentionPeriod:
        Unlimited: false
        NumberOfDays: 10

  TrashLables:
    Type: AWS::Rekognition::Project
    Properties:
      ProjectName: !Sub ${ProjectName}

Outputs:
  TrashBinS3BucketName:
    Value: !Ref TrashBinS3Bucket

  IoTAnalyticsChannel:
    Value: !Ref IoTAnalyticsChannel
